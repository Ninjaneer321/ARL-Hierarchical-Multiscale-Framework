# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_hms')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_hms')
    _hms = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_hms', [dirname(__file__)])
        except ImportError:
            import _hms
            return _hms
        try:
            _mod = imp.load_module('_hms', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _hms = swig_import_helper()
    del swig_import_helper
else:
    import _hms
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _hms.SHARED_PTR_DISOWN
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hms.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _hms.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _hms.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _hms.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _hms.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _hms.SwigPyIterator_equal(self, x)

    def copy(self):
        return _hms.SwigPyIterator_copy(self)

    def next(self):
        return _hms.SwigPyIterator_next(self)

    def __next__(self):
        return _hms.SwigPyIterator___next__(self)

    def previous(self):
        return _hms.SwigPyIterator_previous(self)

    def advance(self, n):
        return _hms.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _hms.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _hms.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _hms.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _hms.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _hms.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _hms.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _hms.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

DEBUG = _hms.DEBUG
ENABLE_AS_STATISTICS = _hms.ENABLE_AS_STATISTICS
ENABLE_PYTHON_BINDINGS = _hms.ENABLE_PYTHON_BINDINGS
HAVE_ALGORITHM = _hms.HAVE_ALGORITHM
HAVE_ARPA_INET_H = _hms.HAVE_ARPA_INET_H
HAVE_ASSERT_H = _hms.HAVE_ASSERT_H
HAVE_BOOST_SHARED_PTR_HPP = _hms.HAVE_BOOST_SHARED_PTR_HPP
HAVE_CASSERT = _hms.HAVE_CASSERT
HAVE_CERRNO = _hms.HAVE_CERRNO
HAVE_CLIMITS = _hms.HAVE_CLIMITS
HAVE_CMATH = _hms.HAVE_CMATH
HAVE_CSTDDEF = _hms.HAVE_CSTDDEF
HAVE_CSTDIO = _hms.HAVE_CSTDIO
HAVE_CSTDLIB = _hms.HAVE_CSTDLIB
HAVE_CSTRING = _hms.HAVE_CSTRING
HAVE_CTIME = _hms.HAVE_CTIME
HAVE_DEQUE = _hms.HAVE_DEQUE
HAVE_DLFCN_H = _hms.HAVE_DLFCN_H
HAVE_EXCEPTION = _hms.HAVE_EXCEPTION
HAVE_FSTREAM = _hms.HAVE_FSTREAM
HAVE_FUNCTIONAL = _hms.HAVE_FUNCTIONAL
HAVE_INTTYPES_H = _hms.HAVE_INTTYPES_H
HAVE_IOMANIP = _hms.HAVE_IOMANIP
HAVE_IOSFWD = _hms.HAVE_IOSFWD
HAVE_IOSTREAM = _hms.HAVE_IOSTREAM
HAVE_ITERATOR = _hms.HAVE_ITERATOR
HAVE_LIST = _hms.HAVE_LIST
HAVE_MAP = _hms.HAVE_MAP
HAVE_MEMORY_H = _hms.HAVE_MEMORY_H
HAVE_MPI = _hms.HAVE_MPI
HAVE_NETDB_H = _hms.HAVE_NETDB_H
HAVE_NETINET_IN_H = _hms.HAVE_NETINET_IN_H
HAVE_NUMERIC = _hms.HAVE_NUMERIC
HAVE_PTHREAD_H = _hms.HAVE_PTHREAD_H
HAVE_PWD_H = _hms.HAVE_PWD_H
HAVE_PYTHON = _hms.HAVE_PYTHON
HAVE_SET = _hms.HAVE_SET
HAVE_SIGNAL_H = _hms.HAVE_SIGNAL_H
HAVE_SSTREAM = _hms.HAVE_SSTREAM
HAVE_STDINT_H = _hms.HAVE_STDINT_H
HAVE_STDLIB_H = _hms.HAVE_STDLIB_H
HAVE_STRING = _hms.HAVE_STRING
HAVE_STRINGS_H = _hms.HAVE_STRINGS_H
HAVE_STRING_H = _hms.HAVE_STRING_H
HAVE_SYS_SOCKET_H = _hms.HAVE_SYS_SOCKET_H
HAVE_SYS_STAT_H = _hms.HAVE_SYS_STAT_H
HAVE_SYS_TYPES_H = _hms.HAVE_SYS_TYPES_H
HAVE_SYS_UN_H = _hms.HAVE_SYS_UN_H
HAVE_SYS_WAIT_H = _hms.HAVE_SYS_WAIT_H
HAVE_UNISTD_H = _hms.HAVE_UNISTD_H
HAVE_UTILITY = _hms.HAVE_UTILITY
HAVE_VECTOR = _hms.HAVE_VECTOR
LT_OBJDIR = _hms.LT_OBJDIR
MPI_NO_CPPBIND = _hms.MPI_NO_CPPBIND
PACKAGE = _hms.PACKAGE
PACKAGE_BUGREPORT = _hms.PACKAGE_BUGREPORT
PACKAGE_NAME = _hms.PACKAGE_NAME
PACKAGE_STRING = _hms.PACKAGE_STRING
PACKAGE_TARNAME = _hms.PACKAGE_TARNAME
PACKAGE_URL = _hms.PACKAGE_URL
PACKAGE_VERSION = _hms.PACKAGE_VERSION
STDC_HEADERS = _hms.STDC_HEADERS
VERSION = _hms.VERSION
CPU = _hms.CPU
GPU = _hms.GPU

def resourceTypeToString(resourceType):
    return _hms.resourceTypeToString(resourceType)
resourceTypeToString = _hms.resourceTypeToString
class Argument(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Argument, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Argument, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _hms.delete_Argument
    __del__ = lambda self: None

    def getToCleanup(self):
        return _hms.Argument_getToCleanup(self)

    def setToCleanup(self, toCleanup):
        return _hms.Argument_setToCleanup(self, toCleanup)

    def __init__(self):
        if self.__class__ == Argument:
            _self = None
        else:
            _self = self
        this = _hms.new_Argument(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _hms.disown_Argument(self)
        return weakref_proxy(self)
Argument_swigregister = _hms.Argument_swigregister
Argument_swigregister(Argument)

class InputFilter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputFilter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputFilter, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _hms.delete_InputFilter
    __del__ = lambda self: None

    def apply(self, argument, directory):
        return _hms.InputFilter_apply(self, argument, directory)

    def __init__(self):
        if self.__class__ == InputFilter:
            _self = None
        else:
            _self = self
        this = _hms.new_InputFilter(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _hms.disown_InputFilter(self)
        return weakref_proxy(self)
InputFilter_swigregister = _hms.InputFilter_swigregister
InputFilter_swigregister(InputFilter)

class Model(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Model, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hms.new_Model(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hms.delete_Model
    __del__ = lambda self: None

    def getArguments(self):
        return _hms.Model_getArguments(self)

    def getExecutable(self):
        return _hms.Model_getExecutable(self)

    def getPrefix(self):
        return _hms.Model_getPrefix(self)

    def getResourceAmount(self):
        return _hms.Model_getResourceAmount(self)

    def getResourceType(self):
        return _hms.Model_getResourceType(self)
Model_swigregister = _hms.Model_swigregister
Model_swigregister(Model)


def __lshift__(outputStream, model):
    return _hms.__lshift__(outputStream, model)
__lshift__ = _hms.__lshift__
class OutputFilter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputFilter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OutputFilter, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _hms.delete_OutputFilter
    __del__ = lambda self: None

    def apply(self, directory, stdOut, argument):
        return _hms.OutputFilter_apply(self, directory, stdOut, argument)

    def __init__(self):
        if self.__class__ == OutputFilter:
            _self = None
        else:
            _self = self
        this = _hms.new_OutputFilter(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _hms.disown_OutputFilter(self)
        return weakref_proxy(self)
OutputFilter_swigregister = _hms.OutputFilter_swigregister
OutputFilter_swigregister(OutputFilter)

class Value(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Value, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Value, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _hms.delete_Value
    __del__ = lambda self: None

    def __init__(self):
        if self.__class__ == Value:
            _self = None
        else:
            _self = self
        this = _hms.new_Value(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _hms.disown_Value(self)
        return weakref_proxy(self)
Value_swigregister = _hms.Value_swigregister
Value_swigregister(Value)

class ModelPackage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelPackage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelPackage, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hms.new_ModelPackage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hms.delete_ModelPackage
    __del__ = lambda self: None

    def addCommunicator(self, communicatorId):
        return _hms.ModelPackage_addCommunicator(self, communicatorId)

    def addEndPredicate(self, predicate):
        return _hms.ModelPackage_addEndPredicate(self, predicate)

    def addStatusPredicate(self, predicate):
        return _hms.ModelPackage_addStatusPredicate(self, predicate)

    def getArgument(self):
        return _hms.ModelPackage_getArgument(self)

    def getBatchQueueSettings(self):
        return _hms.ModelPackage_getBatchQueueSettings(self)

    def getHint(self):
        return _hms.ModelPackage_getHint(self)

    def getId(self):
        return _hms.ModelPackage_getId(self)

    def getInputFilter(self):
        return _hms.ModelPackage_getInputFilter(self)

    def getModel(self):
        return _hms.ModelPackage_getModel(self)

    def getNumberEvaluations(self):
        return _hms.ModelPackage_getNumberEvaluations(self)

    def getOutputFilter(self):
        return _hms.ModelPackage_getOutputFilter(self)

    def getPriority(self):
        return _hms.ModelPackage_getPriority(self)

    def getEndPredicates(self):
        return _hms.ModelPackage_getEndPredicates(self)

    def getStatusPredicates(self):
        return _hms.ModelPackage_getStatusPredicates(self)

    def getTimestampLog(self):
        return _hms.ModelPackage_getTimestampLog(self)

    def getValue(self):
        return _hms.ModelPackage_getValue(self)

    def getWallClockTime(self):
        return _hms.ModelPackage_getWallClockTime(self)

    def logTimestamp(self, message):
        return _hms.ModelPackage_logTimestamp(self, message)

    def popCommunicator(self):
        return _hms.ModelPackage_popCommunicator(self)

    def popTimestamp(self):
        return _hms.ModelPackage_popTimestamp(self)

    def setWallClockTime(self, wallClockTime):
        return _hms.ModelPackage_setWallClockTime(self, wallClockTime)

    def setHint(self, hint):
        return _hms.ModelPackage_setHint(self, hint)

    def setId(self, id):
        return _hms.ModelPackage_setId(self, id)

    def setNumberEvaluations(self, numberEvaluations):
        return _hms.ModelPackage_setNumberEvaluations(self, numberEvaluations)

    def setPriority(self, priority):
        return _hms.ModelPackage_setPriority(self, priority)

    def setValue(self, value):
        return _hms.ModelPackage_setValue(self, value)
ModelPackage_swigregister = _hms.ModelPackage_swigregister
ModelPackage_swigregister(ModelPackage)

class Communicator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Communicator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Communicator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hms.delete_Communicator
    __del__ = lambda self: None

    def send(self, object):
        return _hms.Communicator_send(self, object)

    def receive(self):
        return _hms.Communicator_receive(self)
Communicator_swigregister = _hms.Communicator_swigregister
Communicator_swigregister(Communicator)

class Launcher(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Launcher, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Launcher, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hms.delete_Launcher
    __del__ = lambda self: None
Launcher_swigregister = _hms.Launcher_swigregister
Launcher_swigregister(Launcher)

class BrokerLauncher(Launcher):
    __swig_setmethods__ = {}
    for _s in [Launcher]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BrokerLauncher, name, value)
    __swig_getmethods__ = {}
    for _s in [Launcher]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BrokerLauncher, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hms.new_BrokerLauncher()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hms.delete_BrokerLauncher
    __del__ = lambda self: None

    def launch(self, *args):
        return _hms.BrokerLauncher_launch(self, *args)
BrokerLauncher_swigregister = _hms.BrokerLauncher_swigregister
BrokerLauncher_swigregister(BrokerLauncher)

class CommunicatorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CommunicatorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CommunicatorVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _hms.CommunicatorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hms.CommunicatorVector___nonzero__(self)

    def __bool__(self):
        return _hms.CommunicatorVector___bool__(self)

    def __len__(self):
        return _hms.CommunicatorVector___len__(self)

    def __getslice__(self, i, j):
        return _hms.CommunicatorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hms.CommunicatorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hms.CommunicatorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hms.CommunicatorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hms.CommunicatorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hms.CommunicatorVector___setitem__(self, *args)

    def pop(self):
        return _hms.CommunicatorVector_pop(self)

    def append(self, x):
        return _hms.CommunicatorVector_append(self, x)

    def empty(self):
        return _hms.CommunicatorVector_empty(self)

    def size(self):
        return _hms.CommunicatorVector_size(self)

    def swap(self, v):
        return _hms.CommunicatorVector_swap(self, v)

    def begin(self):
        return _hms.CommunicatorVector_begin(self)

    def end(self):
        return _hms.CommunicatorVector_end(self)

    def rbegin(self):
        return _hms.CommunicatorVector_rbegin(self)

    def rend(self):
        return _hms.CommunicatorVector_rend(self)

    def clear(self):
        return _hms.CommunicatorVector_clear(self)

    def get_allocator(self):
        return _hms.CommunicatorVector_get_allocator(self)

    def pop_back(self):
        return _hms.CommunicatorVector_pop_back(self)

    def erase(self, *args):
        return _hms.CommunicatorVector_erase(self, *args)

    def __init__(self, *args):
        this = _hms.new_CommunicatorVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _hms.CommunicatorVector_push_back(self, x)

    def front(self):
        return _hms.CommunicatorVector_front(self)

    def back(self):
        return _hms.CommunicatorVector_back(self)

    def assign(self, n, x):
        return _hms.CommunicatorVector_assign(self, n, x)

    def resize(self, *args):
        return _hms.CommunicatorVector_resize(self, *args)

    def insert(self, *args):
        return _hms.CommunicatorVector_insert(self, *args)

    def reserve(self, n):
        return _hms.CommunicatorVector_reserve(self, n)

    def capacity(self):
        return _hms.CommunicatorVector_capacity(self)
    __swig_destroy__ = _hms.delete_CommunicatorVector
    __del__ = lambda self: None
CommunicatorVector_swigregister = _hms.CommunicatorVector_swigregister
CommunicatorVector_swigregister(CommunicatorVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _hms.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hms.StringVector___nonzero__(self)

    def __bool__(self):
        return _hms.StringVector___bool__(self)

    def __len__(self):
        return _hms.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _hms.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hms.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hms.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hms.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hms.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hms.StringVector___setitem__(self, *args)

    def pop(self):
        return _hms.StringVector_pop(self)

    def append(self, x):
        return _hms.StringVector_append(self, x)

    def empty(self):
        return _hms.StringVector_empty(self)

    def size(self):
        return _hms.StringVector_size(self)

    def swap(self, v):
        return _hms.StringVector_swap(self, v)

    def begin(self):
        return _hms.StringVector_begin(self)

    def end(self):
        return _hms.StringVector_end(self)

    def rbegin(self):
        return _hms.StringVector_rbegin(self)

    def rend(self):
        return _hms.StringVector_rend(self)

    def clear(self):
        return _hms.StringVector_clear(self)

    def get_allocator(self):
        return _hms.StringVector_get_allocator(self)

    def pop_back(self):
        return _hms.StringVector_pop_back(self)

    def erase(self, *args):
        return _hms.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _hms.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _hms.StringVector_push_back(self, x)

    def front(self):
        return _hms.StringVector_front(self)

    def back(self):
        return _hms.StringVector_back(self)

    def assign(self, n, x):
        return _hms.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _hms.StringVector_resize(self, *args)

    def insert(self, *args):
        return _hms.StringVector_insert(self, *args)

    def reserve(self, n):
        return _hms.StringVector_reserve(self, n)

    def capacity(self):
        return _hms.StringVector_capacity(self)
    __swig_destroy__ = _hms.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _hms.StringVector_swigregister
StringVector_swigregister(StringVector)

class ModelPackageVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelPackageVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelPackageVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _hms.ModelPackageVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hms.ModelPackageVector___nonzero__(self)

    def __bool__(self):
        return _hms.ModelPackageVector___bool__(self)

    def __len__(self):
        return _hms.ModelPackageVector___len__(self)

    def __getslice__(self, i, j):
        return _hms.ModelPackageVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hms.ModelPackageVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hms.ModelPackageVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hms.ModelPackageVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hms.ModelPackageVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hms.ModelPackageVector___setitem__(self, *args)

    def pop(self):
        return _hms.ModelPackageVector_pop(self)

    def append(self, x):
        return _hms.ModelPackageVector_append(self, x)

    def empty(self):
        return _hms.ModelPackageVector_empty(self)

    def size(self):
        return _hms.ModelPackageVector_size(self)

    def swap(self, v):
        return _hms.ModelPackageVector_swap(self, v)

    def begin(self):
        return _hms.ModelPackageVector_begin(self)

    def end(self):
        return _hms.ModelPackageVector_end(self)

    def rbegin(self):
        return _hms.ModelPackageVector_rbegin(self)

    def rend(self):
        return _hms.ModelPackageVector_rend(self)

    def clear(self):
        return _hms.ModelPackageVector_clear(self)

    def get_allocator(self):
        return _hms.ModelPackageVector_get_allocator(self)

    def pop_back(self):
        return _hms.ModelPackageVector_pop_back(self)

    def erase(self, *args):
        return _hms.ModelPackageVector_erase(self, *args)

    def __init__(self, *args):
        this = _hms.new_ModelPackageVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _hms.ModelPackageVector_push_back(self, x)

    def front(self):
        return _hms.ModelPackageVector_front(self)

    def back(self):
        return _hms.ModelPackageVector_back(self)

    def assign(self, n, x):
        return _hms.ModelPackageVector_assign(self, n, x)

    def resize(self, *args):
        return _hms.ModelPackageVector_resize(self, *args)

    def insert(self, *args):
        return _hms.ModelPackageVector_insert(self, *args)

    def reserve(self, n):
        return _hms.ModelPackageVector_reserve(self, n)

    def capacity(self):
        return _hms.ModelPackageVector_capacity(self)
    __swig_destroy__ = _hms.delete_ModelPackageVector
    __del__ = lambda self: None
ModelPackageVector_swigregister = _hms.ModelPackageVector_swigregister
ModelPackageVector_swigregister(ModelPackageVector)

# This file is compatible with both classic and new-style classes.


